/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.eg.cookbook.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import it.eg.cookbook.model.Documento;
import it.eg.cookbook.model.Message;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.util.List;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-25T18:31:12.613479900+01:00[Europe/Rome]")
@Validated
@Tag(name = "Documento", description = "Rest API - Documento CRUD")
public interface DocumentoApi {

    /**
     * POST /documento : Aggiunge un documento
     *
     * @param documento  (required)
     * @return Messaggio generico (status code 200)
     *         or Messaggio generico (status code 400)
     */
    @Operation(
        operationId = "create",
        summary = "Aggiunge un documento",
        tags = { "Documento" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Messaggio generico", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Documento.class))
            }),
            @ApiResponse(responseCode = "400", description = "Messaggio generico", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Message.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/documento",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Documento> create(
        @Parameter(name = "Documento", description = "", required = true) @Valid @RequestBody Documento documento
    );


    /**
     * DELETE /documento/{id} : Elimina un documento
     *
     * @param id  (required)
     * @return Messaggio generico (status code 200)
     *         or Messaggio generico (status code 400)
     */
    @Operation(
        operationId = "delete",
        summary = "Elimina un documento",
        tags = { "Documento" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Messaggio generico", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Message.class))
            }),
            @ApiResponse(responseCode = "400", description = "Messaggio generico", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Message.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/documento/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Message> delete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * GET /documento : Ritorna la lista di documenti
     *
     * @return Lista di documenti (status code 200)
     */
    @Operation(
        operationId = "find",
        summary = "Ritorna la lista di documenti",
        tags = { "Documento" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista di documenti", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Documento.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/documento",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Documento>> find(
        
    );


    /**
     * GET /documento/{id} : Ritorna un documento
     *
     * @param id  (required)
     * @return Documento trovato (status code 200)
     *         or Messaggio generico (status code 400)
     */
    @Operation(
        operationId = "get",
        summary = "Ritorna un documento",
        tags = { "Documento" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Documento trovato", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Documento.class))
            }),
            @ApiResponse(responseCode = "400", description = "Messaggio generico", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Message.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/documento/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Documento> get(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * PUT /documento/{id} : Aggiorna un documento
     *
     * @param id id soggetto (required)
     * @param documento  (required)
     * @return Messaggio generico (status code 200)
     *         or Messaggio generico (status code 400)
     */
    @Operation(
        operationId = "update",
        summary = "Aggiorna un documento",
        tags = { "Documento" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Messaggio generico", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Documento.class))
            }),
            @ApiResponse(responseCode = "400", description = "Messaggio generico", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Message.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/documento/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Documento> update(
        @Parameter(name = "id", description = "id soggetto", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "Documento", description = "", required = true) @Valid @RequestBody Documento documento
    );

}
