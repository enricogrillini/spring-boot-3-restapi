/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.eg.cookbook.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import it.eg.cookbook.model.Document;
import it.eg.cookbook.model.Message;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.util.List;

@Validated
@Tag(name = "Document", description = "Rest API - Document CRUD")
public interface DocumentApi {

    /**
     * DELETE /document/{documentId} : Elimina un documento
     *
     * @param documentId (required)
     * @return Messaggio generico (status code 200)
     * or Messaggio generico (status code 400)
     */
    @Operation(
            operationId = "deleteDocument",
            summary = "Elimina un documento",
            tags = {"Document"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Messaggio generico", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Message.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Messaggio generico", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Message.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/document/{documentId}",
            produces = {"application/json"}
    )
    ResponseEntity<Message> deleteDocument(
            @Parameter(name = "documentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("documentId") Integer documentId
    );


    /**
     * GET /document/{documentId} : Ritorna un documento
     *
     * @param documentId (required)
     * @return Documento trovato (status code 200)
     * or Messaggio generico (status code 400)
     */
    @Operation(
            operationId = "getDocument",
            summary = "Ritorna un documento",
            tags = {"Document"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Documento trovato", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Document.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Messaggio generico", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Message.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/document/{documentId}",
            produces = {"application/json"}
    )
    ResponseEntity<Document> getDocument(
            @Parameter(name = "documentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("documentId") Integer documentId
    );


    /**
     * GET /document : Ritorna la lista di documenti
     *
     * @return Lista di documenti (status code 200)
     */
    @Operation(
            operationId = "getDocuments",
            summary = "Ritorna la lista di documenti",
            tags = {"Document"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Lista di documenti", content = {
                            @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Document.class)))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/document",
            produces = {"application/json"}
    )
    ResponseEntity<List<Document>> getDocuments(

    );


    /**
     * POST /document : Aggiunge un documento
     *
     * @param document (required)
     * @return Messaggio generico (status code 200)
     * or Messaggio generico (status code 400)
     */
    @Operation(
            operationId = "postDocument",
            summary = "Aggiunge un documento",
            tags = {"Document"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Messaggio generico", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Message.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Messaggio generico", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Message.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/document",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    ResponseEntity<Message> postDocument(
            @Parameter(name = "Document", description = "", required = true) @Valid @RequestBody Document document
    );


    /**
     * PUT /document : Aggiorna un documento
     *
     * @param document (required)
     * @return Messaggio generico (status code 200)
     * or Messaggio generico (status code 400)
     */
    @Operation(
            operationId = "putDocument",
            summary = "Aggiorna un documento",
            tags = {"Document"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Messaggio generico", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Message.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Messaggio generico", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Message.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/document",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    ResponseEntity<Message> putDocument(
            @Parameter(name = "Document", description = "", required = true) @Valid @RequestBody Document document
    );

}
